# -*- coding: utf-8 -*-
"""fashionAstraDB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XUmZ9JaVbIYYLHS9zww-3xoarKRS3yYN
"""

!pip install cassandra-driver

!pip install llama-index

!pip install llama-index llama-index-embeddings-huggingface

import warnings
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from llama_index.embeddings.huggingface import HuggingFaceEmbedding

import os

os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'  # Suppresses INFO, WARNING, and ERROR logs
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'  # Suppresses INFO, WARNING, and ERROR logs

# Suppress specific FutureWarnings
warnings.filterwarnings("ignore", category=FutureWarning, module="huggingface_hub")

# Initialize the embedding model with the desired Hugging Face model
embed_model = HuggingFaceEmbedding(model_name="BAAI/bge-small-en-v1.5")

import pandas as pd

# Load product descriptions from CSV
csv_file_path = "productsNew.csv"
df = pd.read_csv(csv_file_path)

# Ensure the CSV has a column named 'ProductDesc' (adjust if different)
if "ProductDesc" not in df.columns:
    raise ValueError("CSV file must contain a column named 'ProductDesc'.")

product_descriptions = df["ProductDesc"].tolist()

# Path to your Secure Connect Bundle
secure_connect_bundle_path = 'secure-connect-practice.zip'

# Your application token
application_token = 'AstraCS:xUrYNbdJpPdyGFoEWqSAfdTt:31902edf2c95646f01421bbdb2e6b237977bb4125d4bf2e973d371b4e621f043'

# Setup authentication provider
auth_provider = PlainTextAuthProvider('token', application_token)

# Connect to the Cassandra database using the secure connect bundle
cluster = Cluster(
    cloud={"secure_connect_bundle": secure_connect_bundle_path},
    auth_provider=auth_provider
)
session = cluster.connect()

# Define keyspace and vector dimension
keyspace = "fashion"
v_dimension = 5

# Set the keyspace
session.set_keyspace(keyspace)

# Create the table if it doesn't exist
session.execute((
    "CREATE TABLE IF NOT EXISTS {keyspace}.ProductImageVectors (ProductId INT PRIMARY KEY, ProductDesc TEXT, ImageURL TEXT, ProductImageVector VECTOR<FLOAT,{v_dimension}>);"
).format(keyspace=keyspace, v_dimension=v_dimension))

# Create the index if it doesn't exist
session.execute((
    "CREATE CUSTOM INDEX IF NOT EXISTS idx_ProductImageVectors "
    "ON {keyspace}.ProductImageVectors "
    "(ProductImageVector) USING 'StorageAttachedIndex' WITH OPTIONS = "
    "{{'similarity_function' : 'cosine'}};"
).format(keyspace=keyspace))

# Iterate over each product description and insert the embeddings into AstraDB
for i, product_desc in enumerate(product_descriptions, start=1):
    # Get embeddings for the current product description
    embeddings = embed_model.get_text_embedding(product_desc)

    # Truncate or pad embeddings to match the vector dimension
    if len(embeddings) > v_dimension:
        embeddings = embeddings[:v_dimension]
    elif len(embeddings) < v_dimension:
        embeddings.extend([0.0] * (v_dimension - len(embeddings)))

    # Insert into AstraDB
    session.execute(
        f"INSERT INTO {keyspace}.ProductImageVectors(ProductId, ProductDesc, ImageURL, ProductImageVector) VALUES (%s, %s, %s, %s)",
        (i, product_desc, f"ProductImage_{i}.jpg", embeddings)
    )
    print(f"Inserted: {product_desc}")

print("All product descriptions have been inserted into AstraDB with embeddings.")

query = """
SELECT productimagevector,
       similarity_cosine([-0.058189, 0.037834, 0.042559, -0.042391, 0.018667], productimagevector) * 100 AS similarity
FROM productimagevectors
ORDER BY productimagevector ANN OF [-0.058189, 0.037834, 0.042559, -0.042391, 0.018667]
LIMIT 3;
"""

# Execute the query
rows = session.execute(query)

# Print the results
for row in rows:
    print(f"Product Vector: {row.productimagevector}, Similarity: {row.similarity}%")



"""https://astra.datastax.com/"""